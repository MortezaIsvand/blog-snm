generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  post          Post[]
  comment       Comment[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tag {
  id   String @id @default(cuid()) @map("_id")
  name String
  post Post[]
}

model Post {
  id        String    @id @default(cuid()) @map("_id")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String
  content   String
  comment   Comment[]
  views     Int       @default(0)
  likes     Int       @default(0)
  tag       Tag?      @relation(fields: [tagId], references: [id])
  tagId     String
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  content   String
  likes     Int      @default(0)
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}
